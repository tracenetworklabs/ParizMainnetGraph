// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Erc20Details extends ethereum.Event {
  get params(): Erc20Details__Params {
    return new Erc20Details__Params(this);
  }
}

export class Erc20Details__Params {
  _event: Erc20Details;

  constructor(event: Erc20Details) {
    this._event = event;
  }

  get tokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[2].value.toString();
  }

  get decimal(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Erc721Details extends ethereum.Event {
  get params(): Erc721Details__Params {
    return new Erc721Details__Params(this);
  }
}

export class Erc721Details__Params {
  _event: Erc721Details;

  constructor(event: Erc721Details) {
    this._event = event;
  }

  get tokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TokenAdded extends ethereum.Event {
  get params(): TokenAdded__Params {
    return new TokenAdded__Params(this);
  }
}

export class TokenAdded__Params {
  _event: TokenAdded;

  constructor(event: TokenAdded) {
    this._event = event;
  }

  get tokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class conversion extends ethereum.SmartContract {
  static bind(address: Address): conversion {
    return new conversion("conversion", address);
  }

  convertFee(targetToken: Address, fee: BigInt): BigInt {
    let result = super.call(
      "convertFee",
      "convertFee(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(targetToken),
        ethereum.Value.fromUnsignedBigInt(fee)
      ]
    );

    return result[0].toBigInt();
  }

  try_convertFee(
    targetToken: Address,
    fee: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "convertFee",
      "convertFee(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(targetToken),
        ethereum.Value.fromUnsignedBigInt(fee)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBaseToken(): Address {
    let result = super.call("getBaseToken", "getBaseToken():(address)", []);

    return result[0].toAddress();
  }

  try_getBaseToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("getBaseToken", "getBaseToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBaseTokenInUSD(): BigInt {
    let result = super.call(
      "getBaseTokenInUSD",
      "getBaseTokenInUSD():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getBaseTokenInUSD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBaseTokenInUSD",
      "getBaseTokenInUSD():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getChainlinkPrice(fetchPrice: Address): BigInt {
    let result = super.call(
      "getChainlinkPrice",
      "getChainlinkPrice(address):(uint256)",
      [ethereum.Value.fromAddress(fetchPrice)]
    );

    return result[0].toBigInt();
  }

  try_getChainlinkPrice(fetchPrice: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getChainlinkPrice",
      "getChainlinkPrice(address):(uint256)",
      [ethereum.Value.fromAddress(fetchPrice)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSwapFromTrace(tokenA: Address): BigInt {
    let result = super.call(
      "getSwapFromTrace",
      "getSwapFromTrace(address):(uint256)",
      [ethereum.Value.fromAddress(tokenA)]
    );

    return result[0].toBigInt();
  }

  try_getSwapFromTrace(tokenA: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSwapFromTrace",
      "getSwapFromTrace(address):(uint256)",
      [ethereum.Value.fromAddress(tokenA)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSwapFromUSD(tokenA: Address): BigInt {
    let result = super.call(
      "getSwapFromUSD",
      "getSwapFromUSD(address):(uint256)",
      [ethereum.Value.fromAddress(tokenA)]
    );

    return result[0].toBigInt();
  }

  try_getSwapFromUSD(tokenA: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSwapFromUSD",
      "getSwapFromUSD(address):(uint256)",
      [ethereum.Value.fromAddress(tokenA)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSwapPrice(tokenA: Address, tokenB: Address): BigInt {
    let result = super.call(
      "getSwapPrice",
      "getSwapPrice(address,address):(uint256)",
      [ethereum.Value.fromAddress(tokenA), ethereum.Value.fromAddress(tokenB)]
    );

    return result[0].toBigInt();
  }

  try_getSwapPrice(
    tokenA: Address,
    tokenB: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSwapPrice",
      "getSwapPrice(address,address):(uint256)",
      [ethereum.Value.fromAddress(tokenA), ethereum.Value.fromAddress(tokenB)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTargetTokenInUSD(targetToken: Address): BigInt {
    let result = super.call(
      "getTargetTokenInUSD",
      "getTargetTokenInUSD(address):(uint256)",
      [ethereum.Value.fromAddress(targetToken)]
    );

    return result[0].toBigInt();
  }

  try_getTargetTokenInUSD(targetToken: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTargetTokenInUSD",
      "getTargetTokenInUSD(address):(uint256)",
      [ethereum.Value.fromAddress(targetToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTokenPrice(targetToken: Address): BigInt {
    let result = super.call(
      "getTokenPrice",
      "getTokenPrice(address):(uint256)",
      [ethereum.Value.fromAddress(targetToken)]
    );

    return result[0].toBigInt();
  }

  try_getTokenPrice(targetToken: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenPrice",
      "getTokenPrice(address):(uint256)",
      [ethereum.Value.fromAddress(targetToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  priceFeed(param0: Address, param1: Address): Address {
    let result = super.call(
      "priceFeed",
      "priceFeed(address,address):(address)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toAddress();
  }

  try_priceFeed(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "priceFeed",
      "priceFeed(address,address):(address)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenCompatibility(): Address {
    let result = super.call(
      "tokenCompatibility",
      "tokenCompatibility():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_tokenCompatibility(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenCompatibility",
      "tokenCompatibility():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AddTokenCall extends ethereum.Call {
  get inputs(): AddTokenCall__Inputs {
    return new AddTokenCall__Inputs(this);
  }

  get outputs(): AddTokenCall__Outputs {
    return new AddTokenCall__Outputs(this);
  }
}

export class AddTokenCall__Inputs {
  _call: AddTokenCall;

  constructor(call: AddTokenCall) {
    this._call = call;
  }

  get token0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _priceFeed(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddTokenCall__Outputs {
  _call: AddTokenCall;

  constructor(call: AddTokenCall) {
    this._call = call;
  }
}

export class AddTokenCompatibilityContractCall extends ethereum.Call {
  get inputs(): AddTokenCompatibilityContractCall__Inputs {
    return new AddTokenCompatibilityContractCall__Inputs(this);
  }

  get outputs(): AddTokenCompatibilityContractCall__Outputs {
    return new AddTokenCompatibilityContractCall__Outputs(this);
  }
}

export class AddTokenCompatibilityContractCall__Inputs {
  _call: AddTokenCompatibilityContractCall;

  constructor(call: AddTokenCompatibilityContractCall) {
    this._call = call;
  }

  get _tokenCompatibility(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddTokenCompatibilityContractCall__Outputs {
  _call: AddTokenCompatibilityContractCall;

  constructor(call: AddTokenCompatibilityContractCall) {
    this._call = call;
  }
}

export class AdminUpdateCall extends ethereum.Call {
  get inputs(): AdminUpdateCall__Inputs {
    return new AdminUpdateCall__Inputs(this);
  }

  get outputs(): AdminUpdateCall__Outputs {
    return new AdminUpdateCall__Outputs(this);
  }
}

export class AdminUpdateCall__Inputs {
  _call: AdminUpdateCall;

  constructor(call: AdminUpdateCall) {
    this._call = call;
  }

  get _Trace(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _router(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _factory(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class AdminUpdateCall__Outputs {
  _call: AdminUpdateCall;

  constructor(call: AdminUpdateCall) {
    this._call = call;
  }
}

export class GetERC20DetailsCall extends ethereum.Call {
  get inputs(): GetERC20DetailsCall__Inputs {
    return new GetERC20DetailsCall__Inputs(this);
  }

  get outputs(): GetERC20DetailsCall__Outputs {
    return new GetERC20DetailsCall__Outputs(this);
  }
}

export class GetERC20DetailsCall__Inputs {
  _call: GetERC20DetailsCall;

  constructor(call: GetERC20DetailsCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GetERC20DetailsCall__Outputs {
  _call: GetERC20DetailsCall;

  constructor(call: GetERC20DetailsCall) {
    this._call = call;
  }
}

export class GetERC721DetailsCall extends ethereum.Call {
  get inputs(): GetERC721DetailsCall__Inputs {
    return new GetERC721DetailsCall__Inputs(this);
  }

  get outputs(): GetERC721DetailsCall__Outputs {
    return new GetERC721DetailsCall__Outputs(this);
  }
}

export class GetERC721DetailsCall__Inputs {
  _call: GetERC721DetailsCall;

  constructor(call: GetERC721DetailsCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GetERC721DetailsCall__Outputs {
  _call: GetERC721DetailsCall;

  constructor(call: GetERC721DetailsCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
