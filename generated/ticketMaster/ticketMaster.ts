// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Bought extends ethereum.Event {
  get params(): Bought__Params {
    return new Bought__Params(this);
  }
}

export class Bought__Params {
  _event: Bought;

  constructor(event: Bought) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get ticketId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class Minted extends ethereum.Event {
  get params(): Minted__Params {
    return new Minted__Params(this);
  }
}

export class Minted__Params {
  _event: Minted;

  constructor(event: Minted) {
    this._event = event;
  }

  get creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TokenCreatorUpdated extends ethereum.Event {
  get params(): TokenCreatorUpdated__Params {
    return new TokenCreatorUpdated__Params(this);
  }
}

export class TokenCreatorUpdated__Params {
  _event: TokenCreatorUpdated;

  constructor(event: TokenCreatorUpdated) {
    this._event = event;
  }

  get fromCreator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get toCreator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ticketMaster__getUserTicketDetailsResult {
  value0: BigInt;
  value1: Address;

  constructor(value0: BigInt, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): Address {
    return this.value1;
  }
}

export class ticketMaster extends ethereum.SmartContract {
  static bind(address: Address): ticketMaster {
    return new ticketMaster("ticketMaster", address);
  }

  _exists(tokenId: BigInt): boolean {
    let result = super.call("_exists", "_exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBoolean();
  }

  try__exists(tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("_exists", "_exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  adminAddress(param0: Address): boolean {
    let result = super.call("adminAddress", "adminAddress(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_adminAddress(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("adminAddress", "adminAddress(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  adminContract(): Address {
    let result = super.call("adminContract", "adminContract():(address)", []);

    return result[0].toAddress();
  }

  try_adminContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "adminContract",
      "adminContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseURI(): string {
    let result = super.call("baseURI", "baseURI():(string)", []);

    return result[0].toString();
  }

  try_baseURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseURI", "baseURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  buyTicketTokenAddress(param0: BigInt, param1: BigInt): Address {
    let result = super.call(
      "buyTicketTokenAddress",
      "buyTicketTokenAddress(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_buyTicketTokenAddress(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "buyTicketTokenAddress",
      "buyTicketTokenAddress(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deployTicketNFT(
    eventTokenId: BigInt,
    name: string,
    time: Array<BigInt>,
    totalSupply: BigInt
  ): Address {
    let result = super.call(
      "deployTicketNFT",
      "deployTicketNFT(uint256,string,uint256[2],uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(eventTokenId),
        ethereum.Value.fromString(name),
        ethereum.Value.fromUnsignedBigIntArray(time),
        ethereum.Value.fromUnsignedBigInt(totalSupply)
      ]
    );

    return result[0].toAddress();
  }

  try_deployTicketNFT(
    eventTokenId: BigInt,
    name: string,
    time: Array<BigInt>,
    totalSupply: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployTicketNFT",
      "deployTicketNFT(uint256,string,uint256[2],uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(eventTokenId),
        ethereum.Value.fromString(name),
        ethereum.Value.fromUnsignedBigIntArray(time),
        ethereum.Value.fromUnsignedBigInt(totalSupply)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  erc721Address(param0: Address): boolean {
    let result = super.call("erc721Address", "erc721Address(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_erc721Address(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "erc721Address",
      "erc721Address(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getJoinEventStatus(_ticketNftAddress: Address, _ticketId: BigInt): boolean {
    let result = super.call(
      "getJoinEventStatus",
      "getJoinEventStatus(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_ticketNftAddress),
        ethereum.Value.fromUnsignedBigInt(_ticketId)
      ]
    );

    return result[0].toBoolean();
  }

  try_getJoinEventStatus(
    _ticketNftAddress: Address,
    _ticketId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getJoinEventStatus",
      "getJoinEventStatus(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_ticketNftAddress),
        ethereum.Value.fromUnsignedBigInt(_ticketId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getNextTokenId(): BigInt {
    let result = super.call("getNextTokenId", "getNextTokenId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getNextTokenId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNextTokenId",
      "getNextTokenId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTicketFeesBalance(eventTokenId: BigInt, tokenAddress: Address): BigInt {
    let result = super.call(
      "getTicketFeesBalance",
      "getTicketFeesBalance(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(eventTokenId),
        ethereum.Value.fromAddress(tokenAddress)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTicketFeesBalance(
    eventTokenId: BigInt,
    tokenAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTicketFeesBalance",
      "getTicketFeesBalance(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(eventTokenId),
        ethereum.Value.fromAddress(tokenAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTicketIds(tokenAddress: Address): Array<BigInt> {
    let result = super.call(
      "getTicketIds",
      "getTicketIds(address):(uint256[])",
      [ethereum.Value.fromAddress(tokenAddress)]
    );

    return result[0].toBigIntArray();
  }

  try_getTicketIds(tokenAddress: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getTicketIds",
      "getTicketIds(address):(uint256[])",
      [ethereum.Value.fromAddress(tokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getTicketNFTAddress(eventTokenId: BigInt): Address {
    let result = super.call(
      "getTicketNFTAddress",
      "getTicketNFTAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(eventTokenId)]
    );

    return result[0].toAddress();
  }

  try_getTicketNFTAddress(eventTokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTicketNFTAddress",
      "getTicketNFTAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(eventTokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getUserTicketDetails(
    eventTokenId: BigInt,
    ticketId: BigInt
  ): ticketMaster__getUserTicketDetailsResult {
    let result = super.call(
      "getUserTicketDetails",
      "getUserTicketDetails(uint256,uint256):(uint256,address)",
      [
        ethereum.Value.fromUnsignedBigInt(eventTokenId),
        ethereum.Value.fromUnsignedBigInt(ticketId)
      ]
    );

    return new ticketMaster__getUserTicketDetailsResult(
      result[0].toBigInt(),
      result[1].toAddress()
    );
  }

  try_getUserTicketDetails(
    eventTokenId: BigInt,
    ticketId: BigInt
  ): ethereum.CallResult<ticketMaster__getUserTicketDetailsResult> {
    let result = super.tryCall(
      "getUserTicketDetails",
      "getUserTicketDetails(uint256,uint256):(uint256,address)",
      [
        ethereum.Value.fromUnsignedBigInt(eventTokenId),
        ethereum.Value.fromUnsignedBigInt(ticketId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ticketMaster__getUserTicketDetailsResult(
        value[0].toBigInt(),
        value[1].toAddress()
      )
    );
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isERC721TokenAddress(tokenAddress: Address): boolean {
    let result = super.call(
      "isERC721TokenAddress",
      "isERC721TokenAddress(address):(bool)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );

    return result[0].toBoolean();
  }

  try_isERC721TokenAddress(
    tokenAddress: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isERC721TokenAddress",
      "isERC721TokenAddress(address):(bool)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mint(userAddress: Address): BigInt {
    let result = super.call("mint", "mint(address):(uint256)", [
      ethereum.Value.fromAddress(userAddress)
    ]);

    return result[0].toBigInt();
  }

  try_mint(userAddress: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mint", "mint(address):(uint256)", [
      ethereum.Value.fromAddress(userAddress)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nftIdPassStatus(param0: Address, param1: BigInt): boolean {
    let result = super.call(
      "nftIdPassStatus",
      "nftIdPassStatus(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_nftIdPassStatus(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "nftIdPassStatus",
      "nftIdPassStatus(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  nftTicketIds(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "nftTicketIds",
      "nftTicketIds(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_nftTicketIds(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nftTicketIds",
      "nftTicketIds(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  refundTicketFeesStatus(param0: BigInt, param1: BigInt): boolean {
    let result = super.call(
      "refundTicketFeesStatus",
      "refundTicketFeesStatus(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_refundTicketFeesStatus(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "refundTicketFeesStatus",
      "refundTicketFeesStatus(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ticketFeesBalance(param0: BigInt, param1: Address): BigInt {
    let result = super.call(
      "ticketFeesBalance",
      "ticketFeesBalance(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_ticketFeesBalance(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ticketFeesBalance",
      "ticketFeesBalance(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ticketNFTAddress(param0: BigInt): Address {
    let result = super.call(
      "ticketNFTAddress",
      "ticketNFTAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_ticketNFTAddress(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ticketNFTAddress",
      "ticketNFTAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ticketSold(param0: BigInt): BigInt {
    let result = super.call("ticketSold", "ticketSold(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_ticketSold(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ticketSold", "ticketSold(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  time(param0: BigInt): BigInt {
    let result = super.call("time", "time(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_time(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("time", "time(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenCreator(tokenId: BigInt): Address {
    let result = super.call("tokenCreator", "tokenCreator(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_tokenCreator(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenCreator",
      "tokenCreator(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userTicketBalance(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "userTicketBalance",
      "userTicketBalance(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_userTicketBalance(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userTicketBalance",
      "userTicketBalance(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BuyTicketCall extends ethereum.Call {
  get inputs(): BuyTicketCall__Inputs {
    return new BuyTicketCall__Inputs(this);
  }

  get outputs(): BuyTicketCall__Outputs {
    return new BuyTicketCall__Outputs(this);
  }
}

export class BuyTicketCall__Inputs {
  _call: BuyTicketCall;

  constructor(call: BuyTicketCall) {
    this._call = call;
  }

  get userAddress(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get buyTicketId(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get tokenAddress(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get tokenAmount(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get tokenType(): Array<string> {
    return this._call.inputValues[4].value.toStringArray();
  }

  get ticketTime(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }
}

export class BuyTicketCall__Outputs {
  _call: BuyTicketCall;

  constructor(call: BuyTicketCall) {
    this._call = call;
  }
}

export class DeployTicketNFTCall extends ethereum.Call {
  get inputs(): DeployTicketNFTCall__Inputs {
    return new DeployTicketNFTCall__Inputs(this);
  }

  get outputs(): DeployTicketNFTCall__Outputs {
    return new DeployTicketNFTCall__Outputs(this);
  }
}

export class DeployTicketNFTCall__Inputs {
  _call: DeployTicketNFTCall;

  constructor(call: DeployTicketNFTCall) {
    this._call = call;
  }

  get eventTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get time(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get totalSupply(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class DeployTicketNFTCall__Outputs {
  _call: DeployTicketNFTCall;

  constructor(call: DeployTicketNFTCall) {
    this._call = call;
  }

  get ticketNFTContract(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class Init_deployCall extends ethereum.Call {
  get inputs(): Init_deployCall__Inputs {
    return new Init_deployCall__Inputs(this);
  }

  get outputs(): Init_deployCall__Outputs {
    return new Init_deployCall__Outputs(this);
  }
}

export class Init_deployCall__Inputs {
  _call: Init_deployCall;

  constructor(call: Init_deployCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _totalSupply(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _eventId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _time(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }

  get _ticketMaster(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class Init_deployCall__Outputs {
  _call: Init_deployCall;

  constructor(call: Init_deployCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get earlyAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get userAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateAdminContractCall extends ethereum.Call {
  get inputs(): UpdateAdminContractCall__Inputs {
    return new UpdateAdminContractCall__Inputs(this);
  }

  get outputs(): UpdateAdminContractCall__Outputs {
    return new UpdateAdminContractCall__Outputs(this);
  }
}

export class UpdateAdminContractCall__Inputs {
  _call: UpdateAdminContractCall;

  constructor(call: UpdateAdminContractCall) {
    this._call = call;
  }

  get _adminContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateAdminContractCall__Outputs {
  _call: UpdateAdminContractCall;

  constructor(call: UpdateAdminContractCall) {
    this._call = call;
  }
}

export class UpdateTicketMasterContractCall extends ethereum.Call {
  get inputs(): UpdateTicketMasterContractCall__Inputs {
    return new UpdateTicketMasterContractCall__Inputs(this);
  }

  get outputs(): UpdateTicketMasterContractCall__Outputs {
    return new UpdateTicketMasterContractCall__Outputs(this);
  }
}

export class UpdateTicketMasterContractCall__Inputs {
  _call: UpdateTicketMasterContractCall;

  constructor(call: UpdateTicketMasterContractCall) {
    this._call = call;
  }

  get _ticketMaster(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateTicketMasterContractCall__Outputs {
  _call: UpdateTicketMasterContractCall;

  constructor(call: UpdateTicketMasterContractCall) {
    this._call = call;
  }
}

export class WhitelistAdminCall extends ethereum.Call {
  get inputs(): WhitelistAdminCall__Inputs {
    return new WhitelistAdminCall__Inputs(this);
  }

  get outputs(): WhitelistAdminCall__Outputs {
    return new WhitelistAdminCall__Outputs(this);
  }
}

export class WhitelistAdminCall__Inputs {
  _call: WhitelistAdminCall;

  constructor(call: WhitelistAdminCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get status(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class WhitelistAdminCall__Outputs {
  _call: WhitelistAdminCall;

  constructor(call: WhitelistAdminCall) {
    this._call = call;
  }
}
