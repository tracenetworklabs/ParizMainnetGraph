// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BaseTokenUpdated extends ethereum.Event {
  get params(): BaseTokenUpdated__Params {
    return new BaseTokenUpdated__Params(this);
  }
}

export class BaseTokenUpdated__Params {
  _event: BaseTokenUpdated;

  constructor(event: BaseTokenUpdated) {
    this._event = event;
  }

  get baseTokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[2].value.toString();
  }

  get decimal(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ConversionContractUpdated extends ethereum.Event {
  get params(): ConversionContractUpdated__Params {
    return new ConversionContractUpdated__Params(this);
  }
}

export class ConversionContractUpdated__Params {
  _event: ConversionContractUpdated;

  constructor(event: ConversionContractUpdated) {
    this._event = event;
  }

  get conversionContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DeviationPercentageUpdated extends ethereum.Event {
  get params(): DeviationPercentageUpdated__Params {
    return new DeviationPercentageUpdated__Params(this);
  }
}

export class DeviationPercentageUpdated__Params {
  _event: DeviationPercentageUpdated;

  constructor(event: DeviationPercentageUpdated) {
    this._event = event;
  }

  get percentage(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Erc20TokenUpdated extends ethereum.Event {
  get params(): Erc20TokenUpdated__Params {
    return new Erc20TokenUpdated__Params(this);
  }
}

export class Erc20TokenUpdated__Params {
  _event: Erc20TokenUpdated;

  constructor(event: Erc20TokenUpdated) {
    this._event = event;
  }

  get tokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get status(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[3].value.toString();
  }

  get decimal(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Erc721TokenUpdated extends ethereum.Event {
  get params(): Erc721TokenUpdated__Params {
    return new Erc721TokenUpdated__Params(this);
  }
}

export class Erc721TokenUpdated__Params {
  _event: Erc721TokenUpdated;

  constructor(event: Erc721TokenUpdated) {
    this._event = event;
  }

  get eventTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get status(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get freePassStatus(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get name(): string {
    return this._event.parameters[4].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[5].value.toString();
  }

  get decimal(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class EventStatusUpdated extends ethereum.Event {
  get params(): EventStatusUpdated__Params {
    return new EventStatusUpdated__Params(this);
  }
}

export class EventStatusUpdated__Params {
  _event: EventStatusUpdated;

  constructor(event: EventStatusUpdated) {
    this._event = event;
  }

  get isPublic(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PlatformFeeUpdated extends ethereum.Event {
  get params(): PlatformFeeUpdated__Params {
    return new PlatformFeeUpdated__Params(this);
  }
}

export class PlatformFeeUpdated__Params {
  _event: PlatformFeeUpdated;

  constructor(event: PlatformFeeUpdated) {
    this._event = event;
  }

  get platformFeePercent(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class TicketCommissionUpdated extends ethereum.Event {
  get params(): TicketCommissionUpdated__Params {
    return new TicketCommissionUpdated__Params(this);
  }
}

export class TicketCommissionUpdated__Params {
  _event: TicketCommissionUpdated;

  constructor(event: TicketCommissionUpdated) {
    this._event = event;
  }

  get ticketCommissionPercent(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class TicketMasterContractUpdated extends ethereum.Event {
  get params(): TicketMasterContractUpdated__Params {
    return new TicketMasterContractUpdated__Params(this);
  }
}

export class TicketMasterContractUpdated__Params {
  _event: TicketMasterContractUpdated;

  constructor(event: TicketMasterContractUpdated) {
    this._event = event;
  }

  get ticketMaster(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class TreasuryContractUpdated extends ethereum.Event {
  get params(): TreasuryContractUpdated__Params {
    return new TreasuryContractUpdated__Params(this);
  }
}

export class TreasuryContractUpdated__Params {
  _event: TreasuryContractUpdated;

  constructor(event: TreasuryContractUpdated) {
    this._event = event;
  }

  get treasuryContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class VenueContractUpdated extends ethereum.Event {
  get params(): VenueContractUpdated__Params {
    return new VenueContractUpdated__Params(this);
  }
}

export class VenueContractUpdated__Params {
  _event: VenueContractUpdated;

  constructor(event: VenueContractUpdated) {
    this._event = event;
  }

  get venueContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class VenueRentalCommissionUpdated extends ethereum.Event {
  get params(): VenueRentalCommissionUpdated__Params {
    return new VenueRentalCommissionUpdated__Params(this);
  }
}

export class VenueRentalCommissionUpdated__Params {
  _event: VenueRentalCommissionUpdated;

  constructor(event: VenueRentalCommissionUpdated) {
    this._event = event;
  }

  get venueRentalCommission(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class WhiteList extends ethereum.Event {
  get params(): WhiteList__Params {
    return new WhiteList__Params(this);
  }
}

export class WhiteList__Params {
  _event: WhiteList;

  constructor(event: WhiteList) {
    this._event = event;
  }

  get whitelistedAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get status(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class signerAddressUpdated extends ethereum.Event {
  get params(): signerAddressUpdated__Params {
    return new signerAddressUpdated__Params(this);
  }
}

export class signerAddressUpdated__Params {
  _event: signerAddressUpdated;

  constructor(event: signerAddressUpdated) {
    this._event = event;
  }

  get signerAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class admin__getTokenDetailsResult {
  value0: string;
  value1: string;
  value2: BigInt;

  constructor(value0: string, value1: string, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class admin extends ethereum.SmartContract {
  static bind(address: Address): admin {
    return new admin("admin", address);
  }

  convertFee(paymentToken: Address, mintFee: BigInt): BigInt {
    let result = super.call(
      "convertFee",
      "convertFee(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(paymentToken),
        ethereum.Value.fromUnsignedBigInt(mintFee)
      ]
    );

    return result[0].toBigInt();
  }

  try_convertFee(
    paymentToken: Address,
    mintFee: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "convertFee",
      "convertFee(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(paymentToken),
        ethereum.Value.fromUnsignedBigInt(mintFee)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  erc20TokenAddress(param0: Address): boolean {
    let result = super.call(
      "erc20TokenAddress",
      "erc20TokenAddress(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_erc20TokenAddress(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "erc20TokenAddress",
      "erc20TokenAddress(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  erc721TokenAddress(param0: BigInt, param1: Address): boolean {
    let result = super.call(
      "erc721TokenAddress",
      "erc721TokenAddress(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_erc721TokenAddress(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "erc721TokenAddress",
      "erc721TokenAddress(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getAdminTreasuryContract(): Address {
    let result = super.call(
      "getAdminTreasuryContract",
      "getAdminTreasuryContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getAdminTreasuryContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getAdminTreasuryContract",
      "getAdminTreasuryContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBaseToken(): Address {
    let result = super.call("getBaseToken", "getBaseToken():(address)", []);

    return result[0].toAddress();
  }

  try_getBaseToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("getBaseToken", "getBaseToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getConversionContract(): Address {
    let result = super.call(
      "getConversionContract",
      "getConversionContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getConversionContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getConversionContract",
      "getConversionContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDeviationPercentage(): BigInt {
    let result = super.call(
      "getDeviationPercentage",
      "getDeviationPercentage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getDeviationPercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDeviationPercentage",
      "getDeviationPercentage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEventContract(): Address {
    let result = super.call(
      "getEventContract",
      "getEventContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getEventContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getEventContract",
      "getEventContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getEventStatus(): boolean {
    let result = super.call("getEventStatus", "getEventStatus():(bool)", []);

    return result[0].toBoolean();
  }

  try_getEventStatus(): ethereum.CallResult<boolean> {
    let result = super.tryCall("getEventStatus", "getEventStatus():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getManageEventContract(): Address {
    let result = super.call(
      "getManageEventContract",
      "getManageEventContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getManageEventContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getManageEventContract",
      "getManageEventContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPlatformFeePercent(): BigInt {
    let result = super.call(
      "getPlatformFeePercent",
      "getPlatformFeePercent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getPlatformFeePercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPlatformFeePercent",
      "getPlatformFeePercent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSignatureContract(): Address {
    let result = super.call(
      "getSignatureContract",
      "getSignatureContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getSignatureContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getSignatureContract",
      "getSignatureContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getSignerAddress(): Address {
    let result = super.call(
      "getSignerAddress",
      "getSignerAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getSignerAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getSignerAddress",
      "getSignerAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTicketCommissionPercent(): BigInt {
    let result = super.call(
      "getTicketCommissionPercent",
      "getTicketCommissionPercent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTicketCommissionPercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTicketCommissionPercent",
      "getTicketCommissionPercent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTicketMasterContract(): Address {
    let result = super.call(
      "getTicketMasterContract",
      "getTicketMasterContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getTicketMasterContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTicketMasterContract",
      "getTicketMasterContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTokenDetails(
    _tokenAddress: Address,
    tokenType: string
  ): admin__getTokenDetailsResult {
    let result = super.call(
      "getTokenDetails",
      "getTokenDetails(address,string):(string,string,uint256)",
      [
        ethereum.Value.fromAddress(_tokenAddress),
        ethereum.Value.fromString(tokenType)
      ]
    );

    return new admin__getTokenDetailsResult(
      result[0].toString(),
      result[1].toString(),
      result[2].toBigInt()
    );
  }

  try_getTokenDetails(
    _tokenAddress: Address,
    tokenType: string
  ): ethereum.CallResult<admin__getTokenDetailsResult> {
    let result = super.tryCall(
      "getTokenDetails",
      "getTokenDetails(address,string):(string,string,uint256)",
      [
        ethereum.Value.fromAddress(_tokenAddress),
        ethereum.Value.fromString(tokenType)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new admin__getTokenDetailsResult(
        value[0].toString(),
        value[1].toString(),
        value[2].toBigInt()
      )
    );
  }

  getTreasuryContract(): Address {
    let result = super.call(
      "getTreasuryContract",
      "getTreasuryContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getTreasuryContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTreasuryContract",
      "getTreasuryContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getVenueContract(): Address {
    let result = super.call(
      "getVenueContract",
      "getVenueContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getVenueContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getVenueContract",
      "getVenueContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getVenueRentalCommission(): BigInt {
    let result = super.call(
      "getVenueRentalCommission",
      "getVenueRentalCommission():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getVenueRentalCommission(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVenueRentalCommission",
      "getVenueRentalCommission():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isErc20TokenWhitelisted(tokenAddress: Address): boolean {
    let result = super.call(
      "isErc20TokenWhitelisted",
      "isErc20TokenWhitelisted(address):(bool)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );

    return result[0].toBoolean();
  }

  try_isErc20TokenWhitelisted(
    tokenAddress: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isErc20TokenWhitelisted",
      "isErc20TokenWhitelisted(address):(bool)",
      [ethereum.Value.fromAddress(tokenAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isErc721TokenFreePass(eventTokenId: BigInt, tokenAddress: Address): BigInt {
    let result = super.call(
      "isErc721TokenFreePass",
      "isErc721TokenFreePass(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(eventTokenId),
        ethereum.Value.fromAddress(tokenAddress)
      ]
    );

    return result[0].toBigInt();
  }

  try_isErc721TokenFreePass(
    eventTokenId: BigInt,
    tokenAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "isErc721TokenFreePass",
      "isErc721TokenFreePass(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(eventTokenId),
        ethereum.Value.fromAddress(tokenAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isErc721TokenWhitelisted(
    eventTokenId: BigInt,
    tokenAddress: Address
  ): boolean {
    let result = super.call(
      "isErc721TokenWhitelisted",
      "isErc721TokenWhitelisted(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(eventTokenId),
        ethereum.Value.fromAddress(tokenAddress)
      ]
    );

    return result[0].toBoolean();
  }

  try_isErc721TokenWhitelisted(
    eventTokenId: BigInt,
    tokenAddress: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isErc721TokenWhitelisted",
      "isErc721TokenWhitelisted(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(eventTokenId),
        ethereum.Value.fromAddress(tokenAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isEventCancelled(eventId: BigInt): boolean {
    let result = super.call(
      "isEventCancelled",
      "isEventCancelled(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(eventId)]
    );

    return result[0].toBoolean();
  }

  try_isEventCancelled(eventId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isEventCancelled",
      "isEventCancelled(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(eventId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isEventEnded(eventId: BigInt): boolean {
    let result = super.call("isEventEnded", "isEventEnded(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(eventId)
    ]);

    return result[0].toBoolean();
  }

  try_isEventEnded(eventId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isEventEnded", "isEventEnded(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(eventId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isEventStarted(eventId: BigInt): boolean {
    let result = super.call(
      "isEventStarted",
      "isEventStarted(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(eventId)]
    );

    return result[0].toBoolean();
  }

  try_isEventStarted(eventId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isEventStarted",
      "isEventStarted(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(eventId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isUserWhitelisted(userAddress: Address): boolean {
    let result = super.call(
      "isUserWhitelisted",
      "isUserWhitelisted(address):(bool)",
      [ethereum.Value.fromAddress(userAddress)]
    );

    return result[0].toBoolean();
  }

  try_isUserWhitelisted(userAddress: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isUserWhitelisted",
      "isUserWhitelisted(address):(bool)",
      [ethereum.Value.fromAddress(userAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  signerAddress(): Address {
    let result = super.call("signerAddress", "signerAddress():(address)", []);

    return result[0].toAddress();
  }

  try_signerAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "signerAddress",
      "signerAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenFreePassStatus(param0: BigInt, param1: Address): BigInt {
    let result = super.call(
      "tokenFreePassStatus",
      "tokenFreePassStatus(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenFreePassStatus(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenFreePassStatus",
      "tokenFreePassStatus(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  whiteListedAddress(param0: Address): boolean {
    let result = super.call(
      "whiteListedAddress",
      "whiteListedAddress(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_whiteListedAddress(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "whiteListedAddress",
      "whiteListedAddress(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateAdminTreasuryContractCall extends ethereum.Call {
  get inputs(): UpdateAdminTreasuryContractCall__Inputs {
    return new UpdateAdminTreasuryContractCall__Inputs(this);
  }

  get outputs(): UpdateAdminTreasuryContractCall__Outputs {
    return new UpdateAdminTreasuryContractCall__Outputs(this);
  }
}

export class UpdateAdminTreasuryContractCall__Inputs {
  _call: UpdateAdminTreasuryContractCall;

  constructor(call: UpdateAdminTreasuryContractCall) {
    this._call = call;
  }

  get _adminTreasuryContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateAdminTreasuryContractCall__Outputs {
  _call: UpdateAdminTreasuryContractCall;

  constructor(call: UpdateAdminTreasuryContractCall) {
    this._call = call;
  }
}

export class UpdateBaseTokenCall extends ethereum.Call {
  get inputs(): UpdateBaseTokenCall__Inputs {
    return new UpdateBaseTokenCall__Inputs(this);
  }

  get outputs(): UpdateBaseTokenCall__Outputs {
    return new UpdateBaseTokenCall__Outputs(this);
  }
}

export class UpdateBaseTokenCall__Inputs {
  _call: UpdateBaseTokenCall;

  constructor(call: UpdateBaseTokenCall) {
    this._call = call;
  }

  get _baseTokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateBaseTokenCall__Outputs {
  _call: UpdateBaseTokenCall;

  constructor(call: UpdateBaseTokenCall) {
    this._call = call;
  }
}

export class UpdateConversionContractCall extends ethereum.Call {
  get inputs(): UpdateConversionContractCall__Inputs {
    return new UpdateConversionContractCall__Inputs(this);
  }

  get outputs(): UpdateConversionContractCall__Outputs {
    return new UpdateConversionContractCall__Outputs(this);
  }
}

export class UpdateConversionContractCall__Inputs {
  _call: UpdateConversionContractCall;

  constructor(call: UpdateConversionContractCall) {
    this._call = call;
  }

  get _conversionContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateConversionContractCall__Outputs {
  _call: UpdateConversionContractCall;

  constructor(call: UpdateConversionContractCall) {
    this._call = call;
  }
}

export class UpdateDeviationCall extends ethereum.Call {
  get inputs(): UpdateDeviationCall__Inputs {
    return new UpdateDeviationCall__Inputs(this);
  }

  get outputs(): UpdateDeviationCall__Outputs {
    return new UpdateDeviationCall__Outputs(this);
  }
}

export class UpdateDeviationCall__Inputs {
  _call: UpdateDeviationCall;

  constructor(call: UpdateDeviationCall) {
    this._call = call;
  }

  get _deviationPercentage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateDeviationCall__Outputs {
  _call: UpdateDeviationCall;

  constructor(call: UpdateDeviationCall) {
    this._call = call;
  }
}

export class UpdateEventContractCall extends ethereum.Call {
  get inputs(): UpdateEventContractCall__Inputs {
    return new UpdateEventContractCall__Inputs(this);
  }

  get outputs(): UpdateEventContractCall__Outputs {
    return new UpdateEventContractCall__Outputs(this);
  }
}

export class UpdateEventContractCall__Inputs {
  _call: UpdateEventContractCall;

  constructor(call: UpdateEventContractCall) {
    this._call = call;
  }

  get _eventContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateEventContractCall__Outputs {
  _call: UpdateEventContractCall;

  constructor(call: UpdateEventContractCall) {
    this._call = call;
  }
}

export class UpdateEventStatusCall extends ethereum.Call {
  get inputs(): UpdateEventStatusCall__Inputs {
    return new UpdateEventStatusCall__Inputs(this);
  }

  get outputs(): UpdateEventStatusCall__Outputs {
    return new UpdateEventStatusCall__Outputs(this);
  }
}

export class UpdateEventStatusCall__Inputs {
  _call: UpdateEventStatusCall;

  constructor(call: UpdateEventStatusCall) {
    this._call = call;
  }

  get _isPublic(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class UpdateEventStatusCall__Outputs {
  _call: UpdateEventStatusCall;

  constructor(call: UpdateEventStatusCall) {
    this._call = call;
  }
}

export class UpdateManageEventContractCall extends ethereum.Call {
  get inputs(): UpdateManageEventContractCall__Inputs {
    return new UpdateManageEventContractCall__Inputs(this);
  }

  get outputs(): UpdateManageEventContractCall__Outputs {
    return new UpdateManageEventContractCall__Outputs(this);
  }
}

export class UpdateManageEventContractCall__Inputs {
  _call: UpdateManageEventContractCall;

  constructor(call: UpdateManageEventContractCall) {
    this._call = call;
  }

  get _manageEvent(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateManageEventContractCall__Outputs {
  _call: UpdateManageEventContractCall;

  constructor(call: UpdateManageEventContractCall) {
    this._call = call;
  }
}

export class UpdatePlatformFeeCall extends ethereum.Call {
  get inputs(): UpdatePlatformFeeCall__Inputs {
    return new UpdatePlatformFeeCall__Inputs(this);
  }

  get outputs(): UpdatePlatformFeeCall__Outputs {
    return new UpdatePlatformFeeCall__Outputs(this);
  }
}

export class UpdatePlatformFeeCall__Inputs {
  _call: UpdatePlatformFeeCall;

  constructor(call: UpdatePlatformFeeCall) {
    this._call = call;
  }

  get _platformFeePercent(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdatePlatformFeeCall__Outputs {
  _call: UpdatePlatformFeeCall;

  constructor(call: UpdatePlatformFeeCall) {
    this._call = call;
  }
}

export class UpdateSignatureContractCall extends ethereum.Call {
  get inputs(): UpdateSignatureContractCall__Inputs {
    return new UpdateSignatureContractCall__Inputs(this);
  }

  get outputs(): UpdateSignatureContractCall__Outputs {
    return new UpdateSignatureContractCall__Outputs(this);
  }
}

export class UpdateSignatureContractCall__Inputs {
  _call: UpdateSignatureContractCall;

  constructor(call: UpdateSignatureContractCall) {
    this._call = call;
  }

  get _signatureContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateSignatureContractCall__Outputs {
  _call: UpdateSignatureContractCall;

  constructor(call: UpdateSignatureContractCall) {
    this._call = call;
  }
}

export class UpdateSignerAddressCall extends ethereum.Call {
  get inputs(): UpdateSignerAddressCall__Inputs {
    return new UpdateSignerAddressCall__Inputs(this);
  }

  get outputs(): UpdateSignerAddressCall__Outputs {
    return new UpdateSignerAddressCall__Outputs(this);
  }
}

export class UpdateSignerAddressCall__Inputs {
  _call: UpdateSignerAddressCall;

  constructor(call: UpdateSignerAddressCall) {
    this._call = call;
  }

  get _signerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateSignerAddressCall__Outputs {
  _call: UpdateSignerAddressCall;

  constructor(call: UpdateSignerAddressCall) {
    this._call = call;
  }
}

export class UpdateTicketCommissionCall extends ethereum.Call {
  get inputs(): UpdateTicketCommissionCall__Inputs {
    return new UpdateTicketCommissionCall__Inputs(this);
  }

  get outputs(): UpdateTicketCommissionCall__Outputs {
    return new UpdateTicketCommissionCall__Outputs(this);
  }
}

export class UpdateTicketCommissionCall__Inputs {
  _call: UpdateTicketCommissionCall;

  constructor(call: UpdateTicketCommissionCall) {
    this._call = call;
  }

  get _ticketCommissionPercent(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateTicketCommissionCall__Outputs {
  _call: UpdateTicketCommissionCall;

  constructor(call: UpdateTicketCommissionCall) {
    this._call = call;
  }
}

export class UpdateTicketMasterContractCall extends ethereum.Call {
  get inputs(): UpdateTicketMasterContractCall__Inputs {
    return new UpdateTicketMasterContractCall__Inputs(this);
  }

  get outputs(): UpdateTicketMasterContractCall__Outputs {
    return new UpdateTicketMasterContractCall__Outputs(this);
  }
}

export class UpdateTicketMasterContractCall__Inputs {
  _call: UpdateTicketMasterContractCall;

  constructor(call: UpdateTicketMasterContractCall) {
    this._call = call;
  }

  get _ticketMaster(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateTicketMasterContractCall__Outputs {
  _call: UpdateTicketMasterContractCall;

  constructor(call: UpdateTicketMasterContractCall) {
    this._call = call;
  }
}

export class UpdateTreasuryContractCall extends ethereum.Call {
  get inputs(): UpdateTreasuryContractCall__Inputs {
    return new UpdateTreasuryContractCall__Inputs(this);
  }

  get outputs(): UpdateTreasuryContractCall__Outputs {
    return new UpdateTreasuryContractCall__Outputs(this);
  }
}

export class UpdateTreasuryContractCall__Inputs {
  _call: UpdateTreasuryContractCall;

  constructor(call: UpdateTreasuryContractCall) {
    this._call = call;
  }

  get _treasuryContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateTreasuryContractCall__Outputs {
  _call: UpdateTreasuryContractCall;

  constructor(call: UpdateTreasuryContractCall) {
    this._call = call;
  }
}

export class UpdateVenueContractCall extends ethereum.Call {
  get inputs(): UpdateVenueContractCall__Inputs {
    return new UpdateVenueContractCall__Inputs(this);
  }

  get outputs(): UpdateVenueContractCall__Outputs {
    return new UpdateVenueContractCall__Outputs(this);
  }
}

export class UpdateVenueContractCall__Inputs {
  _call: UpdateVenueContractCall;

  constructor(call: UpdateVenueContractCall) {
    this._call = call;
  }

  get _venueContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateVenueContractCall__Outputs {
  _call: UpdateVenueContractCall;

  constructor(call: UpdateVenueContractCall) {
    this._call = call;
  }
}

export class UpdateVenueRentalCommissionCall extends ethereum.Call {
  get inputs(): UpdateVenueRentalCommissionCall__Inputs {
    return new UpdateVenueRentalCommissionCall__Inputs(this);
  }

  get outputs(): UpdateVenueRentalCommissionCall__Outputs {
    return new UpdateVenueRentalCommissionCall__Outputs(this);
  }
}

export class UpdateVenueRentalCommissionCall__Inputs {
  _call: UpdateVenueRentalCommissionCall;

  constructor(call: UpdateVenueRentalCommissionCall) {
    this._call = call;
  }

  get _venueRentalCommission(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateVenueRentalCommissionCall__Outputs {
  _call: UpdateVenueRentalCommissionCall;

  constructor(call: UpdateVenueRentalCommissionCall) {
    this._call = call;
  }
}

export class UpdateWhitelistCall extends ethereum.Call {
  get inputs(): UpdateWhitelistCall__Inputs {
    return new UpdateWhitelistCall__Inputs(this);
  }

  get outputs(): UpdateWhitelistCall__Outputs {
    return new UpdateWhitelistCall__Outputs(this);
  }
}

export class UpdateWhitelistCall__Inputs {
  _call: UpdateWhitelistCall;

  constructor(call: UpdateWhitelistCall) {
    this._call = call;
  }

  get _whitelistAddresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _status(): Array<boolean> {
    return this._call.inputValues[1].value.toBooleanArray();
  }
}

export class UpdateWhitelistCall__Outputs {
  _call: UpdateWhitelistCall;

  constructor(call: UpdateWhitelistCall) {
    this._call = call;
  }
}

export class WhitelistErc20TokenAddressCall extends ethereum.Call {
  get inputs(): WhitelistErc20TokenAddressCall__Inputs {
    return new WhitelistErc20TokenAddressCall__Inputs(this);
  }

  get outputs(): WhitelistErc20TokenAddressCall__Outputs {
    return new WhitelistErc20TokenAddressCall__Outputs(this);
  }
}

export class WhitelistErc20TokenAddressCall__Inputs {
  _call: WhitelistErc20TokenAddressCall;

  constructor(call: WhitelistErc20TokenAddressCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get status(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class WhitelistErc20TokenAddressCall__Outputs {
  _call: WhitelistErc20TokenAddressCall;

  constructor(call: WhitelistErc20TokenAddressCall) {
    this._call = call;
  }
}

export class WhitelistErc721TokenAddressCall extends ethereum.Call {
  get inputs(): WhitelistErc721TokenAddressCall__Inputs {
    return new WhitelistErc721TokenAddressCall__Inputs(this);
  }

  get outputs(): WhitelistErc721TokenAddressCall__Outputs {
    return new WhitelistErc721TokenAddressCall__Outputs(this);
  }
}

export class WhitelistErc721TokenAddressCall__Inputs {
  _call: WhitelistErc721TokenAddressCall;

  constructor(call: WhitelistErc721TokenAddressCall) {
    this._call = call;
  }

  get eventTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get status(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get freePassStatus(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class WhitelistErc721TokenAddressCall__Outputs {
  _call: WhitelistErc721TokenAddressCall;

  constructor(call: WhitelistErc721TokenAddressCall) {
    this._call = call;
  }
}
