// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class VenueList extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save VenueList entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save VenueList entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("VenueList", id.toString(), this);
  }

  static load(id: string): VenueList | null {
    return store.get("VenueList", id) as VenueList | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get venueId(): BigInt | null {
    let value = this.get("venueId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set venueId(value: BigInt | null) {
    if (value === null) {
      this.unset("venueId");
    } else {
      this.set("venueId", Value.fromBigInt(value as BigInt));
    }
  }

  get name(): string | null {
    let value = this.get("name");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }

  get location(): string | null {
    let value = this.get("location");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set location(value: string | null) {
    if (value === null) {
      this.unset("location");
    } else {
      this.set("location", Value.fromString(value as string));
    }
  }

  get category(): string | null {
    let value = this.get("category");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set category(value: string | null) {
    if (value === null) {
      this.unset("category");
    } else {
      this.set("category", Value.fromString(value as string));
    }
  }

  get totalCapacity(): BigInt | null {
    let value = this.get("totalCapacity");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalCapacity(value: BigInt | null) {
    if (value === null) {
      this.unset("totalCapacity");
    } else {
      this.set("totalCapacity", Value.fromBigInt(value as BigInt));
    }
  }

  get rentPerBlock(): BigInt | null {
    let value = this.get("rentPerBlock");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set rentPerBlock(value: BigInt | null) {
    if (value === null) {
      this.unset("rentPerBlock");
    } else {
      this.set("rentPerBlock", Value.fromBigInt(value as BigInt));
    }
  }

  get tokenCID(): string | null {
    let value = this.get("tokenCID");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenCID(value: string | null) {
    if (value === null) {
      this.unset("tokenCID");
    } else {
      this.set("tokenCID", Value.fromString(value as string));
    }
  }

  get transactionHash(): string | null {
    let value = this.get("transactionHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transactionHash(value: string | null) {
    if (value === null) {
      this.unset("transactionHash");
    } else {
      this.set("transactionHash", Value.fromString(value as string));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(value as BigInt));
    }
  }
}

export class VenueRental extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save VenueRental entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save VenueRental entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("VenueRental", id.toString(), this);
  }

  static load(id: string): VenueRental | null {
    return store.get("VenueRental", id) as VenueRental | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get venueRentalCommission(): BigInt {
    let value = this.get("venueRentalCommission");
    return value.toBigInt();
  }

  set venueRentalCommission(value: BigInt) {
    this.set("venueRentalCommission", Value.fromBigInt(value));
  }
}

export class EventList extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save EventList entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EventList entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EventList", id.toString(), this);
  }

  static load(id: string): EventList | null {
    return store.get("EventList", id) as EventList | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get eventTokenId(): BigInt | null {
    let value = this.get("eventTokenId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set eventTokenId(value: BigInt | null) {
    if (value === null) {
      this.unset("eventTokenId");
    } else {
      this.set("eventTokenId", Value.fromBigInt(value as BigInt));
    }
  }

  get venueTokenId(): BigInt | null {
    let value = this.get("venueTokenId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set venueTokenId(value: BigInt | null) {
    if (value === null) {
      this.unset("venueTokenId");
    } else {
      this.set("venueTokenId", Value.fromBigInt(value as BigInt));
    }
  }

  get eventName(): string | null {
    let value = this.get("eventName");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set eventName(value: string | null) {
    if (value === null) {
      this.unset("eventName");
    } else {
      this.set("eventName", Value.fromString(value as string));
    }
  }

  get eventCategory(): string | null {
    let value = this.get("eventCategory");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set eventCategory(value: string | null) {
    if (value === null) {
      this.unset("eventCategory");
    } else {
      this.set("eventCategory", Value.fromString(value as string));
    }
  }

  get eventDescription(): string | null {
    let value = this.get("eventDescription");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set eventDescription(value: string | null) {
    if (value === null) {
      this.unset("eventDescription");
    } else {
      this.set("eventDescription", Value.fromString(value as string));
    }
  }

  get eventStartTime(): BigInt | null {
    let value = this.get("eventStartTime");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set eventStartTime(value: BigInt | null) {
    if (value === null) {
      this.unset("eventStartTime");
    } else {
      this.set("eventStartTime", Value.fromBigInt(value as BigInt));
    }
  }

  get eventEndTime(): BigInt | null {
    let value = this.get("eventEndTime");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set eventEndTime(value: BigInt | null) {
    if (value === null) {
      this.unset("eventEndTime");
    } else {
      this.set("eventEndTime", Value.fromBigInt(value as BigInt));
    }
  }

  get tokenCID(): string | null {
    let value = this.get("tokenCID");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenCID(value: string | null) {
    if (value === null) {
      this.unset("tokenCID");
    } else {
      this.set("tokenCID", Value.fromString(value as string));
    }
  }

  get isVenueFeesPaid(): boolean {
    let value = this.get("isVenueFeesPaid");
    return value.toBoolean();
  }

  set isVenueFeesPaid(value: boolean) {
    this.set("isVenueFeesPaid", Value.fromBoolean(value));
  }

  get isPaid(): boolean {
    let value = this.get("isPaid");
    return value.toBoolean();
  }

  set isPaid(value: boolean) {
    this.set("isPaid", Value.fromBoolean(value));
  }

  get ticketPrice(): BigInt | null {
    let value = this.get("ticketPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ticketPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("ticketPrice");
    } else {
      this.set("ticketPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get transactionHash(): string | null {
    let value = this.get("transactionHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transactionHash(value: string | null) {
    if (value === null) {
      this.unset("transactionHash");
    } else {
      this.set("transactionHash", Value.fromString(value as string));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get eventOrganiserAddress(): Bytes | null {
    let value = this.get("eventOrganiserAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set eventOrganiserAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("eventOrganiserAddress");
    } else {
      this.set("eventOrganiserAddress", Value.fromBytes(value as Bytes));
    }
  }

  get isFeatured(): boolean {
    let value = this.get("isFeatured");
    return value.toBoolean();
  }

  set isFeatured(value: boolean) {
    this.set("isFeatured", Value.fromBoolean(value));
  }

  get burnStatus(): string | null {
    let value = this.get("burnStatus");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set burnStatus(value: string | null) {
    if (value === null) {
      this.unset("burnStatus");
    } else {
      this.set("burnStatus", Value.fromString(value as string));
    }
  }

  get eventStatus(): string | null {
    let value = this.get("eventStatus");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set eventStatus(value: string | null) {
    if (value === null) {
      this.unset("eventStatus");
    } else {
      this.set("eventStatus", Value.fromString(value as string));
    }
  }

  get tokenAddress(): Bytes | null {
    let value = this.get("tokenAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("tokenAddress");
    } else {
      this.set("tokenAddress", Value.fromBytes(value as Bytes));
    }
  }

  get venueFeeAmount(): BigInt | null {
    let value = this.get("venueFeeAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set venueFeeAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("venueFeeAmount");
    } else {
      this.set("venueFeeAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get ticketNFTAddress(): Bytes | null {
    let value = this.get("ticketNFTAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set ticketNFTAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("ticketNFTAddress");
    } else {
      this.set("ticketNFTAddress", Value.fromBytes(value as Bytes));
    }
  }

  get isEventCanceled(): boolean {
    let value = this.get("isEventCanceled");
    return value.toBoolean();
  }

  set isEventCanceled(value: boolean) {
    this.set("isEventCanceled", Value.fromBoolean(value));
  }

  get isEventCompleted(): boolean {
    let value = this.get("isEventCompleted");
    return value.toBoolean();
  }

  set isEventCompleted(value: boolean) {
    this.set("isEventCompleted", Value.fromBoolean(value));
  }

  get canceledTime(): BigInt | null {
    let value = this.get("canceledTime");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set canceledTime(value: BigInt | null) {
    if (value === null) {
      this.unset("canceledTime");
    } else {
      this.set("canceledTime", Value.fromBigInt(value as BigInt));
    }
  }

  get isEventStarted(): boolean {
    let value = this.get("isEventStarted");
    return value.toBoolean();
  }

  set isEventStarted(value: boolean) {
    this.set("isEventStarted", Value.fromBoolean(value));
  }

  get isEventEnded(): boolean {
    let value = this.get("isEventEnded");
    return value.toBoolean();
  }

  set isEventEnded(value: boolean) {
    this.set("isEventEnded", Value.fromBoolean(value));
  }

  get participantsList(): Array<string | null> {
    let value = this.get("participantsList");
    return value.toStringArray();
  }

  set participantsList(value: Array<string | null>) {
    this.set("participantsList", Value.fromStringArray(value));
  }

  get ticketBoughtList(): Array<string | null> {
    let value = this.get("ticketBoughtList");
    return value.toStringArray();
  }

  set ticketBoughtList(value: Array<string | null>) {
    this.set("ticketBoughtList", Value.fromStringArray(value));
  }

  get ticketBalance(): Array<string | null> {
    let value = this.get("ticketBalance");
    return value.toStringArray();
  }

  set ticketBalance(value: Array<string | null>) {
    this.set("ticketBalance", Value.fromStringArray(value));
  }

  get conversionAddress(): Bytes | null {
    let value = this.get("conversionAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set conversionAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("conversionAddress");
    } else {
      this.set("conversionAddress", Value.fromBytes(value as Bytes));
    }
  }
}

export class PlatformFee extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PlatformFee entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PlatformFee entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PlatformFee", id.toString(), this);
  }

  static load(id: string): PlatformFee | null {
    return store.get("PlatformFee", id) as PlatformFee | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get PlatformFeePercent(): BigInt | null {
    let value = this.get("PlatformFeePercent");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set PlatformFeePercent(value: BigInt | null) {
    if (value === null) {
      this.unset("PlatformFeePercent");
    } else {
      this.set("PlatformFeePercent", Value.fromBigInt(value as BigInt));
    }
  }
}

export class IsEventPublic extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save IsEventPublic entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save IsEventPublic entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("IsEventPublic", id.toString(), this);
  }

  static load(id: string): IsEventPublic | null {
    return store.get("IsEventPublic", id) as IsEventPublic | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get eventContract(): Bytes | null {
    let value = this.get("eventContract");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set eventContract(value: Bytes | null) {
    if (value === null) {
      this.unset("eventContract");
    } else {
      this.set("eventContract", Value.fromBytes(value as Bytes));
    }
  }

  get eventStatus(): boolean {
    let value = this.get("eventStatus");
    return value.toBoolean();
  }

  set eventStatus(value: boolean) {
    this.set("eventStatus", Value.fromBoolean(value));
  }
}

export class BaseToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save BaseToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BaseToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BaseToken", id.toString(), this);
  }

  static load(id: string): BaseToken | null {
    return store.get("BaseToken", id) as BaseToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get baseTokenAddress(): Bytes | null {
    let value = this.get("baseTokenAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set baseTokenAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("baseTokenAddress");
    } else {
      this.set("baseTokenAddress", Value.fromBytes(value as Bytes));
    }
  }

  get tokenName(): string | null {
    let value = this.get("tokenName");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenName(value: string | null) {
    if (value === null) {
      this.unset("tokenName");
    } else {
      this.set("tokenName", Value.fromString(value as string));
    }
  }

  get tokenSymbol(): string | null {
    let value = this.get("tokenSymbol");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenSymbol(value: string | null) {
    if (value === null) {
      this.unset("tokenSymbol");
    } else {
      this.set("tokenSymbol", Value.fromString(value as string));
    }
  }

  get tokenDecimal(): BigInt | null {
    let value = this.get("tokenDecimal");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokenDecimal(value: BigInt | null) {
    if (value === null) {
      this.unset("tokenDecimal");
    } else {
      this.set("tokenDecimal", Value.fromBigInt(value as BigInt));
    }
  }
}

export class WhiteList extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save WhiteList entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save WhiteList entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("WhiteList", id.toString(), this);
  }

  static load(id: string): WhiteList | null {
    return store.get("WhiteList", id) as WhiteList | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get userAddress(): Bytes | null {
    let value = this.get("userAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set userAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("userAddress");
    } else {
      this.set("userAddress", Value.fromBytes(value as Bytes));
    }
  }

  get status(): boolean {
    let value = this.get("status");
    return value.toBoolean();
  }

  set status(value: boolean) {
    this.set("status", Value.fromBoolean(value));
  }
}

export class Erc20TokenEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Erc20TokenEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Erc20TokenEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Erc20TokenEvent", id.toString(), this);
  }

  static load(id: string): Erc20TokenEvent | null {
    return store.get("Erc20TokenEvent", id) as Erc20TokenEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenAddress(): Bytes | null {
    let value = this.get("tokenAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("tokenAddress");
    } else {
      this.set("tokenAddress", Value.fromBytes(value as Bytes));
    }
  }

  get status(): boolean {
    let value = this.get("status");
    return value.toBoolean();
  }

  set status(value: boolean) {
    this.set("status", Value.fromBoolean(value));
  }

  get tokenName(): string | null {
    let value = this.get("tokenName");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenName(value: string | null) {
    if (value === null) {
      this.unset("tokenName");
    } else {
      this.set("tokenName", Value.fromString(value as string));
    }
  }

  get tokenSymbol(): string | null {
    let value = this.get("tokenSymbol");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenSymbol(value: string | null) {
    if (value === null) {
      this.unset("tokenSymbol");
    } else {
      this.set("tokenSymbol", Value.fromString(value as string));
    }
  }

  get tokenDecimal(): BigInt | null {
    let value = this.get("tokenDecimal");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokenDecimal(value: BigInt | null) {
    if (value === null) {
      this.unset("tokenDecimal");
    } else {
      this.set("tokenDecimal", Value.fromBigInt(value as BigInt));
    }
  }
}

export class Erc721EventToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Erc721EventToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Erc721EventToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Erc721EventToken", id.toString(), this);
  }

  static load(id: string): Erc721EventToken | null {
    return store.get("Erc721EventToken", id) as Erc721EventToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenAddress(): Bytes | null {
    let value = this.get("tokenAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("tokenAddress");
    } else {
      this.set("tokenAddress", Value.fromBytes(value as Bytes));
    }
  }

  get eventTokenId(): BigInt | null {
    let value = this.get("eventTokenId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set eventTokenId(value: BigInt | null) {
    if (value === null) {
      this.unset("eventTokenId");
    } else {
      this.set("eventTokenId", Value.fromBigInt(value as BigInt));
    }
  }

  get tokenName(): string | null {
    let value = this.get("tokenName");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenName(value: string | null) {
    if (value === null) {
      this.unset("tokenName");
    } else {
      this.set("tokenName", Value.fromString(value as string));
    }
  }

  get tokenSymbol(): string | null {
    let value = this.get("tokenSymbol");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenSymbol(value: string | null) {
    if (value === null) {
      this.unset("tokenSymbol");
    } else {
      this.set("tokenSymbol", Value.fromString(value as string));
    }
  }

  get tokenDecimal(): string | null {
    let value = this.get("tokenDecimal");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenDecimal(value: string | null) {
    if (value === null) {
      this.unset("tokenDecimal");
    } else {
      this.set("tokenDecimal", Value.fromString(value as string));
    }
  }

  get status(): boolean {
    let value = this.get("status");
    return value.toBoolean();
  }

  set status(value: boolean) {
    this.set("status", Value.fromBoolean(value));
  }

  get freePass(): BigInt | null {
    let value = this.get("freePass");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set freePass(value: BigInt | null) {
    if (value === null) {
      this.unset("freePass");
    } else {
      this.set("freePass", Value.fromBigInt(value as BigInt));
    }
  }
}

export class Favourite extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Favourite entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Favourite entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Favourite", id.toString(), this);
  }

  static load(id: string): Favourite | null {
    return store.get("Favourite", id) as Favourite | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get userAddress(): Bytes | null {
    let value = this.get("userAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set userAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("userAddress");
    } else {
      this.set("userAddress", Value.fromBytes(value as Bytes));
    }
  }

  get eventTokenId(): BigInt | null {
    let value = this.get("eventTokenId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set eventTokenId(value: BigInt | null) {
    if (value === null) {
      this.unset("eventTokenId");
    } else {
      this.set("eventTokenId", Value.fromBigInt(value as BigInt));
    }
  }

  get isFavourite(): boolean {
    let value = this.get("isFavourite");
    return value.toBoolean();
  }

  set isFavourite(value: boolean) {
    this.set("isFavourite", Value.fromBoolean(value));
  }
}

export class BookedTime extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save BookedTime entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BookedTime entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BookedTime", id.toString(), this);
  }

  static load(id: string): BookedTime | null {
    return store.get("BookedTime", id) as BookedTime | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get venueId(): BigInt | null {
    let value = this.get("venueId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set venueId(value: BigInt | null) {
    if (value === null) {
      this.unset("venueId");
    } else {
      this.set("venueId", Value.fromBigInt(value as BigInt));
    }
  }

  get eventTokenId(): Array<BigInt> | null {
    let value = this.get("eventTokenId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set eventTokenId(value: Array<BigInt> | null) {
    if (value === null) {
      this.unset("eventTokenId");
    } else {
      this.set("eventTokenId", Value.fromBigIntArray(value as Array<BigInt>));
    }
  }

  get eventStartTime(): Array<BigInt> | null {
    let value = this.get("eventStartTime");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set eventStartTime(value: Array<BigInt> | null) {
    if (value === null) {
      this.unset("eventStartTime");
    } else {
      this.set("eventStartTime", Value.fromBigIntArray(value as Array<BigInt>));
    }
  }

  get eventEndTime(): Array<BigInt> | null {
    let value = this.get("eventEndTime");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set eventEndTime(value: Array<BigInt> | null) {
    if (value === null) {
      this.unset("eventEndTime");
    } else {
      this.set("eventEndTime", Value.fromBigIntArray(value as Array<BigInt>));
    }
  }

  get name(): string | null {
    let value = this.get("name");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }

  get location(): string | null {
    let value = this.get("location");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set location(value: string | null) {
    if (value === null) {
      this.unset("location");
    } else {
      this.set("location", Value.fromString(value as string));
    }
  }

  get category(): string | null {
    let value = this.get("category");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set category(value: string | null) {
    if (value === null) {
      this.unset("category");
    } else {
      this.set("category", Value.fromString(value as string));
    }
  }

  get totalCapacity(): BigInt | null {
    let value = this.get("totalCapacity");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalCapacity(value: BigInt | null) {
    if (value === null) {
      this.unset("totalCapacity");
    } else {
      this.set("totalCapacity", Value.fromBigInt(value as BigInt));
    }
  }

  get rentPerBlock(): BigInt | null {
    let value = this.get("rentPerBlock");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set rentPerBlock(value: BigInt | null) {
    if (value === null) {
      this.unset("rentPerBlock");
    } else {
      this.set("rentPerBlock", Value.fromBigInt(value as BigInt));
    }
  }

  get tokenCID(): string | null {
    let value = this.get("tokenCID");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenCID(value: string | null) {
    if (value === null) {
      this.unset("tokenCID");
    } else {
      this.set("tokenCID", Value.fromString(value as string));
    }
  }

  get transactionHash(): string | null {
    let value = this.get("transactionHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transactionHash(value: string | null) {
    if (value === null) {
      this.unset("transactionHash");
    } else {
      this.set("transactionHash", Value.fromString(value as string));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get times(): Array<string | null> {
    let value = this.get("times");
    return value.toStringArray();
  }

  set times(value: Array<string | null>) {
    this.set("times", Value.fromStringArray(value));
  }
}

export class EventTime extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save EventTime entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EventTime entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EventTime", id.toString(), this);
  }

  static load(id: string): EventTime | null {
    return store.get("EventTime", id) as EventTime | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get venueId(): BigInt | null {
    let value = this.get("venueId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set venueId(value: BigInt | null) {
    if (value === null) {
      this.unset("venueId");
    } else {
      this.set("venueId", Value.fromBigInt(value as BigInt));
    }
  }

  get eventTokenId(): BigInt | null {
    let value = this.get("eventTokenId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set eventTokenId(value: BigInt | null) {
    if (value === null) {
      this.unset("eventTokenId");
    } else {
      this.set("eventTokenId", Value.fromBigInt(value as BigInt));
    }
  }

  get eventStartTime(): BigInt | null {
    let value = this.get("eventStartTime");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set eventStartTime(value: BigInt | null) {
    if (value === null) {
      this.unset("eventStartTime");
    } else {
      this.set("eventStartTime", Value.fromBigInt(value as BigInt));
    }
  }

  get eventEndTime(): BigInt | null {
    let value = this.get("eventEndTime");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set eventEndTime(value: BigInt | null) {
    if (value === null) {
      this.unset("eventEndTime");
    } else {
      this.set("eventEndTime", Value.fromBigInt(value as BigInt));
    }
  }

  get isEventCanceled(): boolean {
    let value = this.get("isEventCanceled");
    return value.toBoolean();
  }

  set isEventCanceled(value: boolean) {
    this.set("isEventCanceled", Value.fromBoolean(value));
  }
}

export class Agenda extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Agenda entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Agenda entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Agenda", id.toString(), this);
  }

  static load(id: string): Agenda | null {
    return store.get("Agenda", id) as Agenda | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get agendaId(): BigInt | null {
    let value = this.get("agendaId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set agendaId(value: BigInt | null) {
    if (value === null) {
      this.unset("agendaId");
    } else {
      this.set("agendaId", Value.fromBigInt(value as BigInt));
    }
  }

  get eventTokenId(): BigInt | null {
    let value = this.get("eventTokenId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set eventTokenId(value: BigInt | null) {
    if (value === null) {
      this.unset("eventTokenId");
    } else {
      this.set("eventTokenId", Value.fromBigInt(value as BigInt));
    }
  }

  get agendaStartTime(): BigInt | null {
    let value = this.get("agendaStartTime");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set agendaStartTime(value: BigInt | null) {
    if (value === null) {
      this.unset("agendaStartTime");
    } else {
      this.set("agendaStartTime", Value.fromBigInt(value as BigInt));
    }
  }

  get agendaEndTime(): BigInt | null {
    let value = this.get("agendaEndTime");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set agendaEndTime(value: BigInt | null) {
    if (value === null) {
      this.unset("agendaEndTime");
    } else {
      this.set("agendaEndTime", Value.fromBigInt(value as BigInt));
    }
  }

  get agendaName(): string | null {
    let value = this.get("agendaName");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set agendaName(value: string | null) {
    if (value === null) {
      this.unset("agendaName");
    } else {
      this.set("agendaName", Value.fromString(value as string));
    }
  }

  get agendaStatus(): string | null {
    let value = this.get("agendaStatus");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set agendaStatus(value: string | null) {
    if (value === null) {
      this.unset("agendaStatus");
    } else {
      this.set("agendaStatus", Value.fromString(value as string));
    }
  }

  get guestName(): Array<string> | null {
    let value = this.get("guestName");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set guestName(value: Array<string> | null) {
    if (value === null) {
      this.unset("guestName");
    } else {
      this.set("guestName", Value.fromStringArray(value as Array<string>));
    }
  }

  get guestAddress(): Array<string> | null {
    let value = this.get("guestAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set guestAddress(value: Array<string> | null) {
    if (value === null) {
      this.unset("guestAddress");
    } else {
      this.set("guestAddress", Value.fromStringArray(value as Array<string>));
    }
  }

  get initiateStatus(): i32 {
    let value = this.get("initiateStatus");
    return value.toI32();
  }

  set initiateStatus(value: i32) {
    this.set("initiateStatus", Value.fromI32(value));
  }

  get isAgendaDeleted(): boolean {
    let value = this.get("isAgendaDeleted");
    return value.toBoolean();
  }

  set isAgendaDeleted(value: boolean) {
    this.set("isAgendaDeleted", Value.fromBoolean(value));
  }
}

export class History extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save History entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save History entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("History", id.toString(), this);
  }

  static load(id: string): History | null {
    return store.get("History", id) as History | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get eventTokenId(): BigInt | null {
    let value = this.get("eventTokenId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set eventTokenId(value: BigInt | null) {
    if (value === null) {
      this.unset("eventTokenId");
    } else {
      this.set("eventTokenId", Value.fromBigInt(value as BigInt));
    }
  }

  get data(): Array<string> | null {
    let value = this.get("data");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set data(value: Array<string> | null) {
    if (value === null) {
      this.unset("data");
    } else {
      this.set("data", Value.fromStringArray(value as Array<string>));
    }
  }

  get userAddress(): Bytes | null {
    let value = this.get("userAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set userAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("userAddress");
    } else {
      this.set("userAddress", Value.fromBytes(value as Bytes));
    }
  }
}

export class Join extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Join entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Join entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Join", id.toString(), this);
  }

  static load(id: string): Join | null {
    return store.get("Join", id) as Join | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get eventTokenId(): BigInt | null {
    let value = this.get("eventTokenId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set eventTokenId(value: BigInt | null) {
    if (value === null) {
      this.unset("eventTokenId");
    } else {
      this.set("eventTokenId", Value.fromBigInt(value as BigInt));
    }
  }

  get userAddress(): Bytes | null {
    let value = this.get("userAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set userAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("userAddress");
    } else {
      this.set("userAddress", Value.fromBytes(value as Bytes));
    }
  }

  get joinTime(): BigInt | null {
    let value = this.get("joinTime");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set joinTime(value: BigInt | null) {
    if (value === null) {
      this.unset("joinTime");
    } else {
      this.set("joinTime", Value.fromBigInt(value as BigInt));
    }
  }

  get ticketId(): BigInt | null {
    let value = this.get("ticketId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ticketId(value: BigInt | null) {
    if (value === null) {
      this.unset("ticketId");
    } else {
      this.set("ticketId", Value.fromBigInt(value as BigInt));
    }
  }

  get isJoined(): boolean {
    let value = this.get("isJoined");
    return value.toBoolean();
  }

  set isJoined(value: boolean) {
    this.set("isJoined", Value.fromBoolean(value));
  }
}

export class Exit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Exit entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Exit entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Exit", id.toString(), this);
  }

  static load(id: string): Exit | null {
    return store.get("Exit", id) as Exit | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get eventTokenId(): BigInt | null {
    let value = this.get("eventTokenId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set eventTokenId(value: BigInt | null) {
    if (value === null) {
      this.unset("eventTokenId");
    } else {
      this.set("eventTokenId", Value.fromBigInt(value as BigInt));
    }
  }

  get userAddress(): Bytes | null {
    let value = this.get("userAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set userAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("userAddress");
    } else {
      this.set("userAddress", Value.fromBytes(value as Bytes));
    }
  }

  get leavingTime(): BigInt | null {
    let value = this.get("leavingTime");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set leavingTime(value: BigInt | null) {
    if (value === null) {
      this.unset("leavingTime");
    } else {
      this.set("leavingTime", Value.fromBigInt(value as BigInt));
    }
  }

  get ticketId(): BigInt | null {
    let value = this.get("ticketId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ticketId(value: BigInt | null) {
    if (value === null) {
      this.unset("ticketId");
    } else {
      this.set("ticketId", Value.fromBigInt(value as BigInt));
    }
  }
}

export class TicketBought extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TicketBought entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TicketBought entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TicketBought", id.toString(), this);
  }

  static load(id: string): TicketBought | null {
    return store.get("TicketBought", id) as TicketBought | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get eventTokenId(): BigInt | null {
    let value = this.get("eventTokenId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set eventTokenId(value: BigInt | null) {
    if (value === null) {
      this.unset("eventTokenId");
    } else {
      this.set("eventTokenId", Value.fromBigInt(value as BigInt));
    }
  }

  get ticketId(): BigInt | null {
    let value = this.get("ticketId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ticketId(value: BigInt | null) {
    if (value === null) {
      this.unset("ticketId");
    } else {
      this.set("ticketId", Value.fromBigInt(value as BigInt));
    }
  }

  get userAddress(): Bytes | null {
    let value = this.get("userAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set userAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("userAddress");
    } else {
      this.set("userAddress", Value.fromBytes(value as Bytes));
    }
  }

  get tokenAddress(): Bytes | null {
    let value = this.get("tokenAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("tokenAddress");
    } else {
      this.set("tokenAddress", Value.fromBytes(value as Bytes));
    }
  }

  get ticketFeeAmount(): BigInt | null {
    let value = this.get("ticketFeeAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ticketFeeAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("ticketFeeAmount");
    } else {
      this.set("ticketFeeAmount", Value.fromBigInt(value as BigInt));
    }
  }
}

export class TicketBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TicketBalance entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TicketBalance entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TicketBalance", id.toString(), this);
  }

  static load(id: string): TicketBalance | null {
    return store.get("TicketBalance", id) as TicketBalance | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ticketId(): BigInt | null {
    let value = this.get("ticketId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ticketId(value: BigInt | null) {
    if (value === null) {
      this.unset("ticketId");
    } else {
      this.set("ticketId", Value.fromBigInt(value as BigInt));
    }
  }

  get ownerAddress(): Bytes | null {
    let value = this.get("ownerAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set ownerAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("ownerAddress");
    } else {
      this.set("ownerAddress", Value.fromBytes(value as Bytes));
    }
  }

  get from(): Bytes | null {
    let value = this.get("from");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set from(value: Bytes | null) {
    if (value === null) {
      this.unset("from");
    } else {
      this.set("from", Value.fromBytes(value as Bytes));
    }
  }

  get ticketNFTAddress(): Bytes | null {
    let value = this.get("ticketNFTAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set ticketNFTAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("ticketNFTAddress");
    } else {
      this.set("ticketNFTAddress", Value.fromBytes(value as Bytes));
    }
  }

  get isUsed(): boolean {
    let value = this.get("isUsed");
    return value.toBoolean();
  }

  set isUsed(value: boolean) {
    this.set("isUsed", Value.fromBoolean(value));
  }

  get balance(): BigInt | null {
    let value = this.get("balance");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set balance(value: BigInt | null) {
    if (value === null) {
      this.unset("balance");
    } else {
      this.set("balance", Value.fromBigInt(value as BigInt));
    }
  }

  get tokenAddress(): Bytes | null {
    let value = this.get("tokenAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tokenAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("tokenAddress");
    } else {
      this.set("tokenAddress", Value.fromBytes(value as Bytes));
    }
  }

  get ticketFeeAmount(): BigInt | null {
    let value = this.get("ticketFeeAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ticketFeeAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("ticketFeeAmount");
    } else {
      this.set("ticketFeeAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get eventTokenId(): BigInt | null {
    let value = this.get("eventTokenId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set eventTokenId(value: BigInt | null) {
    if (value === null) {
      this.unset("eventTokenId");
    } else {
      this.set("eventTokenId", Value.fromBigInt(value as BigInt));
    }
  }
}

export class TicketRefund extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TicketRefund entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TicketRefund entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TicketRefund", id.toString(), this);
  }

  static load(id: string): TicketRefund | null {
    return store.get("TicketRefund", id) as TicketRefund | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get eventTokenId(): BigInt | null {
    let value = this.get("eventTokenId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set eventTokenId(value: BigInt | null) {
    if (value === null) {
      this.unset("eventTokenId");
    } else {
      this.set("eventTokenId", Value.fromBigInt(value as BigInt));
    }
  }

  get ticketId(): BigInt | null {
    let value = this.get("ticketId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ticketId(value: BigInt | null) {
    if (value === null) {
      this.unset("ticketId");
    } else {
      this.set("ticketId", Value.fromBigInt(value as BigInt));
    }
  }

  get userAddress(): Bytes | null {
    let value = this.get("userAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set userAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("userAddress");
    } else {
      this.set("userAddress", Value.fromBytes(value as Bytes));
    }
  }

  get refundStatus(): boolean {
    let value = this.get("refundStatus");
    return value.toBoolean();
  }

  set refundStatus(value: boolean) {
    this.set("refundStatus", Value.fromBoolean(value));
  }
}

export class VenueRefund extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save VenueRefund entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save VenueRefund entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("VenueRefund", id.toString(), this);
  }

  static load(id: string): VenueRefund | null {
    return store.get("VenueRefund", id) as VenueRefund | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get eventTokenId(): BigInt | null {
    let value = this.get("eventTokenId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set eventTokenId(value: BigInt | null) {
    if (value === null) {
      this.unset("eventTokenId");
    } else {
      this.set("eventTokenId", Value.fromBigInt(value as BigInt));
    }
  }

  get eventOrganiser(): Bytes | null {
    let value = this.get("eventOrganiser");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set eventOrganiser(value: Bytes | null) {
    if (value === null) {
      this.unset("eventOrganiser");
    } else {
      this.set("eventOrganiser", Value.fromBytes(value as Bytes));
    }
  }

  get refundStatus(): boolean {
    let value = this.get("refundStatus");
    return value.toBoolean();
  }

  set refundStatus(value: boolean) {
    this.set("refundStatus", Value.fromBoolean(value));
  }
}

export class EventId extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save EventId entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EventId entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EventId", id.toString(), this);
  }

  static load(id: string): EventId | null {
    return store.get("EventId", id) as EventId | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get eventId(): BigInt | null {
    let value = this.get("eventId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set eventId(value: BigInt | null) {
    if (value === null) {
      this.unset("eventId");
    } else {
      this.set("eventId", Value.fromBigInt(value as BigInt));
    }
  }

  get ticketNFTAddress(): Bytes | null {
    let value = this.get("ticketNFTAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set ticketNFTAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("ticketNFTAddress");
    } else {
      this.set("ticketNFTAddress", Value.fromBytes(value as Bytes));
    }
  }
}

export class Erc721UserToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Erc721UserToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Erc721UserToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Erc721UserToken", id.toString(), this);
  }

  static load(id: string): Erc721UserToken | null {
    return store.get("Erc721UserToken", id) as Erc721UserToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (value === null) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(value as Bytes));
    }
  }

  get from(): Bytes | null {
    let value = this.get("from");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set from(value: Bytes | null) {
    if (value === null) {
      this.unset("from");
    } else {
      this.set("from", Value.fromBytes(value as Bytes));
    }
  }

  get tokenID(): BigInt | null {
    let value = this.get("tokenID");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokenID(value: BigInt | null) {
    if (value === null) {
      this.unset("tokenID");
    } else {
      this.set("tokenID", Value.fromBigInt(value as BigInt));
    }
  }

  get nftContractAddress(): Bytes | null {
    let value = this.get("nftContractAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set nftContractAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("nftContractAddress");
    } else {
      this.set("nftContractAddress", Value.fromBytes(value as Bytes));
    }
  }

  get balance(): BigInt | null {
    let value = this.get("balance");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set balance(value: BigInt | null) {
    if (value === null) {
      this.unset("balance");
    } else {
      this.set("balance", Value.fromBigInt(value as BigInt));
    }
  }

  get isUsed(): boolean {
    let value = this.get("isUsed");
    return value.toBoolean();
  }

  set isUsed(value: boolean) {
    this.set("isUsed", Value.fromBoolean(value));
  }
}

export class isTokenUsed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save isTokenUsed entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save isTokenUsed entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("isTokenUsed", id.toString(), this);
  }

  static load(id: string): isTokenUsed | null {
    return store.get("isTokenUsed", id) as isTokenUsed | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nftContractAddress(): Bytes | null {
    let value = this.get("nftContractAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set nftContractAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("nftContractAddress");
    } else {
      this.set("nftContractAddress", Value.fromBytes(value as Bytes));
    }
  }

  get tokenID(): BigInt | null {
    let value = this.get("tokenID");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokenID(value: BigInt | null) {
    if (value === null) {
      this.unset("tokenID");
    } else {
      this.set("tokenID", Value.fromBigInt(value as BigInt));
    }
  }

  get isUsed(): boolean {
    let value = this.get("isUsed");
    return value.toBoolean();
  }

  set isUsed(value: boolean) {
    this.set("isUsed", Value.fromBoolean(value));
  }
}
