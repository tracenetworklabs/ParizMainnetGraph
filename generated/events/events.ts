// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BaseURIUpdated extends ethereum.Event {
  get params(): BaseURIUpdated__Params {
    return new BaseURIUpdated__Params(this);
  }
}

export class BaseURIUpdated__Params {
  _event: BaseURIUpdated;

  constructor(event: BaseURIUpdated) {
    this._event = event;
  }

  get baseURI(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class EventAdded extends ethereum.Event {
  get params(): EventAdded__Params {
    return new EventAdded__Params(this);
  }
}

export class EventAdded__Params {
  _event: EventAdded;

  constructor(event: EventAdded) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenCID(): string {
    return this._event.parameters[1].value.toString();
  }

  get venueTokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get isVenueFeesPaid(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get isEventPaid(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }

  get eventOrganiser(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get ticketPrice(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get venueFeeAmount(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get ticketNFTAddress(): Address {
    return this._event.parameters[8].value.toAddress();
  }
}

export class EventPaid extends ethereum.Event {
  get params(): EventPaid__Params {
    return new EventPaid__Params(this);
  }
}

export class EventPaid__Params {
  _event: EventPaid;

  constructor(event: EventPaid) {
    this._event = event;
  }

  get eventTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get payNow(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get venueFeeAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EventUpdated extends ethereum.Event {
  get params(): EventUpdated__Params {
    return new EventUpdated__Params(this);
  }
}

export class EventUpdated__Params {
  _event: EventUpdated;

  constructor(event: EventUpdated) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get description(): string {
    return this._event.parameters[1].value.toString();
  }

  get startTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get venueFeeAmount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Favourite extends ethereum.Event {
  get params(): Favourite__Params {
    return new Favourite__Params(this);
  }
}

export class Favourite__Params {
  _event: Favourite;

  constructor(event: Favourite) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get isFavourite(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Featured extends ethereum.Event {
  get params(): Featured__Params {
    return new Featured__Params(this);
  }
}

export class Featured__Params {
  _event: Featured;

  constructor(event: Featured) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get isFeatured(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class Joined extends ethereum.Event {
  get params(): Joined__Params {
    return new Joined__Params(this);
  }
}

export class Joined__Params {
  _event: Joined;

  constructor(event: Joined) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get joiningTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get ticketId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Minted extends ethereum.Event {
  get params(): Minted__Params {
    return new Minted__Params(this);
  }
}

export class Minted__Params {
  _event: Minted;

  constructor(event: Minted) {
    this._event = event;
  }

  get creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get indexedTokenIPFSPath(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get tokenIPFSPath(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class NFTMetadataUpdated extends ethereum.Event {
  get params(): NFTMetadataUpdated__Params {
    return new NFTMetadataUpdated__Params(this);
  }
}

export class NFTMetadataUpdated__Params {
  _event: NFTMetadataUpdated;

  constructor(event: NFTMetadataUpdated) {
    this._event = event;
  }

  get name(): string {
    return this._event.parameters[0].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[1].value.toString();
  }

  get baseURI(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TokenCreatorUpdated extends ethereum.Event {
  get params(): TokenCreatorUpdated__Params {
    return new TokenCreatorUpdated__Params(this);
  }
}

export class TokenCreatorUpdated__Params {
  _event: TokenCreatorUpdated;

  constructor(event: TokenCreatorUpdated) {
    this._event = event;
  }

  get fromCreator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get toCreator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class VenueFeesClaimed extends ethereum.Event {
  get params(): VenueFeesClaimed__Params {
    return new VenueFeesClaimed__Params(this);
  }
}

export class VenueFeesClaimed__Params {
  _event: VenueFeesClaimed;

  constructor(event: VenueFeesClaimed) {
    this._event = event;
  }

  get venueTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get eventIds(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get venueOwner(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class VenueFeesRefunded extends ethereum.Event {
  get params(): VenueFeesRefunded__Params {
    return new VenueFeesRefunded__Params(this);
  }
}

export class VenueFeesRefunded__Params {
  _event: VenueFeesRefunded;

  constructor(event: VenueFeesRefunded) {
    this._event = event;
  }

  get eventTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get eventOrganiser(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class events__calculateRentResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class events__getEventDetailsResult {
  value0: BigInt;
  value1: BigInt;
  value2: Address;
  value3: boolean;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: Address,
    value3: boolean,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class events__getInfoResult {
  value0: string;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: boolean;
  value8: Address;
  value9: BigInt;

  constructor(
    value0: string,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: boolean,
    value8: Address,
    value9: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    map.set("value8", ethereum.Value.fromAddress(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    return map;
  }
}

export class events extends ethereum.SmartContract {
  static bind(address: Address): events {
    return new events("events", address);
  }

  _exists(tokenId: BigInt): boolean {
    let result = super.call("_exists", "_exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBoolean();
  }

  try__exists(tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("_exists", "_exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  adminContract(): Address {
    let result = super.call("adminContract", "adminContract():(address)", []);

    return result[0].toAddress();
  }

  try_adminContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "adminContract",
      "adminContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balance(param0: BigInt): BigInt {
    let result = super.call("balance", "balance(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_balance(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balance", "balance(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseURI(): string {
    let result = super.call("baseURI", "baseURI():(string)", []);

    return result[0].toString();
  }

  try_baseURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseURI", "baseURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  blockTime(): BigInt {
    let result = super.call("blockTime", "blockTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_blockTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("blockTime", "blockTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateRent(
    venueTokenId: BigInt,
    eventStartTime: BigInt,
    eventEndTime: BigInt
  ): events__calculateRentResult {
    let result = super.call(
      "calculateRent",
      "calculateRent(uint256,uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(venueTokenId),
        ethereum.Value.fromUnsignedBigInt(eventStartTime),
        ethereum.Value.fromUnsignedBigInt(eventEndTime)
      ]
    );

    return new events__calculateRentResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_calculateRent(
    venueTokenId: BigInt,
    eventStartTime: BigInt,
    eventEndTime: BigInt
  ): ethereum.CallResult<events__calculateRentResult> {
    let result = super.tryCall(
      "calculateRent",
      "calculateRent(uint256,uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(venueTokenId),
        ethereum.Value.fromUnsignedBigInt(eventStartTime),
        ethereum.Value.fromUnsignedBigInt(eventEndTime)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new events__calculateRentResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  eventTokenAddress(param0: BigInt): Address {
    let result = super.call(
      "eventTokenAddress",
      "eventTokenAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_eventTokenAddress(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "eventTokenAddress",
      "eventTokenAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  eventsInVenue(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "eventsInVenue",
      "eventsInVenue(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_eventsInVenue(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "eventsInVenue",
      "eventsInVenue(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  favouriteEvents(param0: Address, param1: BigInt): boolean {
    let result = super.call(
      "favouriteEvents",
      "favouriteEvents(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_favouriteEvents(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "favouriteEvents",
      "favouriteEvents(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  featuredEvents(param0: BigInt): boolean {
    let result = super.call(
      "featuredEvents",
      "featuredEvents(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBoolean();
  }

  try_featuredEvents(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "featuredEvents",
      "featuredEvents(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getEventDetails(tokenId: BigInt): events__getEventDetailsResult {
    let result = super.call(
      "getEventDetails",
      "getEventDetails(uint256):(uint256,uint256,address,bool,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return new events__getEventDetailsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toBoolean(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_getEventDetails(
    tokenId: BigInt
  ): ethereum.CallResult<events__getEventDetailsResult> {
    let result = super.tryCall(
      "getEventDetails",
      "getEventDetails(uint256):(uint256,uint256,address,bool,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new events__getEventDetailsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toBoolean(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  getHasCreatorMintedIPFSHash(
    creator: Address,
    tokenIPFSPath: string
  ): boolean {
    let result = super.call(
      "getHasCreatorMintedIPFSHash",
      "getHasCreatorMintedIPFSHash(address,string):(bool)",
      [
        ethereum.Value.fromAddress(creator),
        ethereum.Value.fromString(tokenIPFSPath)
      ]
    );

    return result[0].toBoolean();
  }

  try_getHasCreatorMintedIPFSHash(
    creator: Address,
    tokenIPFSPath: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getHasCreatorMintedIPFSHash",
      "getHasCreatorMintedIPFSHash(address,string):(bool)",
      [
        ethereum.Value.fromAddress(creator),
        ethereum.Value.fromString(tokenIPFSPath)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getInfo(param0: BigInt): events__getInfoResult {
    let result = super.call(
      "getInfo",
      "getInfo(uint256):(string,string,string,uint256,uint256,uint256,uint256,bool,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new events__getInfoResult(
      result[0].toString(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBoolean(),
      result[8].toAddress(),
      result[9].toBigInt()
    );
  }

  try_getInfo(param0: BigInt): ethereum.CallResult<events__getInfoResult> {
    let result = super.tryCall(
      "getInfo",
      "getInfo(uint256):(string,string,string,uint256,uint256,uint256,uint256,bool,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new events__getInfoResult(
        value[0].toString(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBoolean(),
        value[8].toAddress(),
        value[9].toBigInt()
      )
    );
  }

  getJoinEventStatus(_ticketNftAddress: Address, _ticketId: BigInt): boolean {
    let result = super.call(
      "getJoinEventStatus",
      "getJoinEventStatus(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_ticketNftAddress),
        ethereum.Value.fromUnsignedBigInt(_ticketId)
      ]
    );

    return result[0].toBoolean();
  }

  try_getJoinEventStatus(
    _ticketNftAddress: Address,
    _ticketId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getJoinEventStatus",
      "getJoinEventStatus(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_ticketNftAddress),
        ethereum.Value.fromUnsignedBigInt(_ticketId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getNextTokenId(): BigInt {
    let result = super.call("getNextTokenId", "getNextTokenId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getNextTokenId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNextTokenId",
      "getNextTokenId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTokenCID(tokenId: BigInt): string {
    let result = super.call("getTokenCID", "getTokenCID(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_getTokenCID(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("getTokenCID", "getTokenCID(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isRentPaid(eventOrganiser: Address, eventTokenId: BigInt): boolean {
    let result = super.call(
      "isRentPaid",
      "isRentPaid(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(eventOrganiser),
        ethereum.Value.fromUnsignedBigInt(eventTokenId)
      ]
    );

    return result[0].toBoolean();
  }

  try_isRentPaid(
    eventOrganiser: Address,
    eventTokenId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isRentPaid",
      "isRentPaid(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(eventOrganiser),
        ethereum.Value.fromUnsignedBigInt(eventTokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  joinEventStatus(param0: Address, param1: BigInt): boolean {
    let result = super.call(
      "joinEventStatus",
      "joinEventStatus(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_joinEventStatus(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "joinEventStatus",
      "joinEventStatus(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  platformFeesPaid(param0: BigInt): BigInt {
    let result = super.call(
      "platformFeesPaid",
      "platformFeesPaid(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_platformFeesPaid(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "platformFeesPaid",
      "platformFeesPaid(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rentStatus(param0: Address, param1: BigInt): boolean {
    let result = super.call(
      "rentStatus",
      "rentStatus(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_rentStatus(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "rentStatus",
      "rentStatus(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ticketNFTAddress(param0: BigInt): Address {
    let result = super.call(
      "ticketNFTAddress",
      "ticketNFTAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_ticketNFTAddress(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ticketNFTAddress",
      "ticketNFTAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenCreator(tokenId: BigInt): Address {
    let result = super.call("tokenCreator", "tokenCreator(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_tokenCreator(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenCreator",
      "tokenCreator(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class AddCall extends ethereum.Call {
  get inputs(): AddCall__Inputs {
    return new AddCall__Inputs(this);
  }

  get outputs(): AddCall__Outputs {
    return new AddCall__Outputs(this);
  }
}

export class AddCall__Inputs {
  _call: AddCall;

  constructor(call: AddCall) {
    this._call = call;
  }

  get details(): Array<string> {
    return this._call.inputValues[0].value.toStringArray();
  }

  get time(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get tokenCID(): string {
    return this._call.inputValues[2].value.toString();
  }

  get venueTokenId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get venueFeeAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get ticketPrice(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get isEventPaid(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }

  get payNow(): boolean {
    return this._call.inputValues[7].value.toBoolean();
  }
}

export class AddCall__Outputs {
  _call: AddCall;

  constructor(call: AddCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class ClaimVenueFeesCall extends ethereum.Call {
  get inputs(): ClaimVenueFeesCall__Inputs {
    return new ClaimVenueFeesCall__Inputs(this);
  }

  get outputs(): ClaimVenueFeesCall__Outputs {
    return new ClaimVenueFeesCall__Outputs(this);
  }
}

export class ClaimVenueFeesCall__Inputs {
  _call: ClaimVenueFeesCall;

  constructor(call: ClaimVenueFeesCall) {
    this._call = call;
  }

  get venueTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimVenueFeesCall__Outputs {
  _call: ClaimVenueFeesCall;

  constructor(call: ClaimVenueFeesCall) {
    this._call = call;
  }
}

export class FeaturedCall extends ethereum.Call {
  get inputs(): FeaturedCall__Inputs {
    return new FeaturedCall__Inputs(this);
  }

  get outputs(): FeaturedCall__Outputs {
    return new FeaturedCall__Outputs(this);
  }
}

export class FeaturedCall__Inputs {
  _call: FeaturedCall;

  constructor(call: FeaturedCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get isFeatured(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class FeaturedCall__Outputs {
  _call: FeaturedCall;

  constructor(call: FeaturedCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class JoinCall extends ethereum.Call {
  get inputs(): JoinCall__Inputs {
    return new JoinCall__Inputs(this);
  }

  get outputs(): JoinCall__Outputs {
    return new JoinCall__Outputs(this);
  }
}

export class JoinCall__Inputs {
  _call: JoinCall;

  constructor(call: JoinCall) {
    this._call = call;
  }

  get signature(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }

  get ticketHolder(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get eventTokenId(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get ticketId(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class JoinCall__Outputs {
  _call: JoinCall;

  constructor(call: JoinCall) {
    this._call = call;
  }
}

export class PayEventCall extends ethereum.Call {
  get inputs(): PayEventCall__Inputs {
    return new PayEventCall__Inputs(this);
  }

  get outputs(): PayEventCall__Outputs {
    return new PayEventCall__Outputs(this);
  }
}

export class PayEventCall__Inputs {
  _call: PayEventCall;

  constructor(call: PayEventCall) {
    this._call = call;
  }

  get eventTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get venueFeeAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class PayEventCall__Outputs {
  _call: PayEventCall;

  constructor(call: PayEventCall) {
    this._call = call;
  }
}

export class RefundVenueFeesCall extends ethereum.Call {
  get inputs(): RefundVenueFeesCall__Inputs {
    return new RefundVenueFeesCall__Inputs(this);
  }

  get outputs(): RefundVenueFeesCall__Outputs {
    return new RefundVenueFeesCall__Outputs(this);
  }
}

export class RefundVenueFeesCall__Inputs {
  _call: RefundVenueFeesCall;

  constructor(call: RefundVenueFeesCall) {
    this._call = call;
  }

  get eventTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RefundVenueFeesCall__Outputs {
  _call: RefundVenueFeesCall;

  constructor(call: RefundVenueFeesCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateAdminContractCall extends ethereum.Call {
  get inputs(): UpdateAdminContractCall__Inputs {
    return new UpdateAdminContractCall__Inputs(this);
  }

  get outputs(): UpdateAdminContractCall__Outputs {
    return new UpdateAdminContractCall__Outputs(this);
  }
}

export class UpdateAdminContractCall__Inputs {
  _call: UpdateAdminContractCall;

  constructor(call: UpdateAdminContractCall) {
    this._call = call;
  }

  get _adminContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateAdminContractCall__Outputs {
  _call: UpdateAdminContractCall;

  constructor(call: UpdateAdminContractCall) {
    this._call = call;
  }
}

export class UpdateEventCall extends ethereum.Call {
  get inputs(): UpdateEventCall__Inputs {
    return new UpdateEventCall__Inputs(this);
  }

  get outputs(): UpdateEventCall__Outputs {
    return new UpdateEventCall__Outputs(this);
  }
}

export class UpdateEventCall__Inputs {
  _call: UpdateEventCall;

  constructor(call: UpdateEventCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get description(): string {
    return this._call.inputValues[1].value.toString();
  }

  get time(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class UpdateEventCall__Outputs {
  _call: UpdateEventCall;

  constructor(call: UpdateEventCall) {
    this._call = call;
  }
}

export class UpdateFavouriteCall extends ethereum.Call {
  get inputs(): UpdateFavouriteCall__Inputs {
    return new UpdateFavouriteCall__Inputs(this);
  }

  get outputs(): UpdateFavouriteCall__Outputs {
    return new UpdateFavouriteCall__Outputs(this);
  }
}

export class UpdateFavouriteCall__Inputs {
  _call: UpdateFavouriteCall;

  constructor(call: UpdateFavouriteCall) {
    this._call = call;
  }

  get userAddress(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get tokenId(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get isFavourite(): Array<boolean> {
    return this._call.inputValues[2].value.toBooleanArray();
  }
}

export class UpdateFavouriteCall__Outputs {
  _call: UpdateFavouriteCall;

  constructor(call: UpdateFavouriteCall) {
    this._call = call;
  }
}
